{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/kyleryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bootloader-0.10.12","program":"/Users/kyleryan/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","bootloader","--edition=2018","/Users/kyleryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bootloader-0.10.12/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"default\"","-C","metadata=685b05f5e20300dc","-C","extra-filename=-685b05f5e20300dc","--out-dir","/Users/kyleryan/Documents/GitHub/KJR-OS/kjr_os/target/rls/debug/deps","-L","dependency=/Users/kyleryan/Documents/GitHub/KJR-OS/kjr_os/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/Users/kyleryan/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/kyleryan/Documents/GitHub/KJR-OS/kjr_os/target/rls/debug/deps/libbootloader-685b05f5e20300dc.rmeta"},"prelude":{"crate_id":{"name":"bootloader","disambiguator":[10780751070946450310,0]},"crate_root":"/Users/kyleryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bootloader-0.10.12/src","external_crates":[{"file_name":"/Users/kyleryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bootloader-0.10.12/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[8008232612675471143,0]}},{"file_name":"/Users/kyleryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bootloader-0.10.12/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[15888577660968845229,0]}},{"file_name":"/Users/kyleryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bootloader-0.10.12/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[6892144175080859156,0]}}],"span":{"file_name":"/Users/kyleryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bootloader-0.10.12/src/lib.rs","byte_start":0,"byte_end":6056,"line_start":1,"line_end":128,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/kyleryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bootloader-0.10.12/src/lib.rs","byte_start":0,"byte_end":6056,"line_start":1,"line_end":128,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/kyleryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bootloader-0.10.12/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":48}],"decl_id":null,"docs":"An experimental x86_64 bootloader that works on both BIOS and UEFI systems.","sig":null,"attributes":[{"value":"*\nAn experimental x86_64 bootloader that works on both BIOS and UEFI systems.\n\nTo use this crate, specify it as a dependency in the `Cargo.toml` of your operating system\nkernel. Then you can use the [`entry_point`] macro to mark your entry point function. This\ngives you access to the [`BootInfo`] struct, which is passed by the bootloader.\n\n## Disk Image Creation\n\nIncluding the `bootloader` crate as a dependency makes the kernel binary suitable for booting,\nbut does not create any bootable disk images. To create them, two additional steps are needed:\n\n1. **Locate the source code of the `bootloader` dependency** on your local system. By using the\n   dependency source code directly, we ensure that the kernel and bootloader use the same version\n   of the [`BootInfo`] struct.\n    - When creating a builder binary written in Rust, the\n      [`bootloader_locator`](https://docs.rs/bootloader-locator/0.0.4/bootloader_locator/) crate can\n      be used to automate this step.\n    - Otherwise, the\n      [`cargo metadata`](https://doc.rust-lang.org/cargo/commands/cargo-metadata.html) subcommand\n      can be used to locate the dependency. The command outputs a JSON object with various metadata\n      for the current package. To find the `bootloader` source path in it, first look for the\n      \"bootloader\" dependency under `resolve.nodes.deps` to find out its ID (in the `pkg` field).\n      Then use that ID to find the bootloader in `packages`. Its `manifest_path` field contains the\n      local path to the `Cargo.toml` of the bootloader.\n2. **Run the following command** in the source code directory of the `bootloader` dependency to create\n   the bootable disk images:\n\n    ```notrust\n    cargo builder --kernel-manifest path/to/kernel/Cargo.toml --kernel-binary path/to/kernel_bin\n    ```\n\n    The `--kernel-manifest` argument should point to the `Cargo.toml` of your kernel. It is used\n    for applying configuration settings. The `--kernel-binary` argument should point to the kernel\n    executable that should be used for the bootable disk images.\n\n    In addition to the `--kernel-manifest` and `--kernel-binary` arguments, it is recommended to also\n    set the `--target-dir` and `--out-dir` arguments. The former specifies the directory that should\n    used for cargo build artifacts and the latter specfies the directory where the resulting disk\n    images should be placed. It is recommended to set `--target-dir` to the `target` folder of your\n    kernel and `--out-dir` to the the parent folder of `--kernel-binary`.\n\nThis will result in the following files, which are placed in the specified `--out-dir`:\n\n- A disk image suitable for BIOS booting, named `boot-bios-<kernel>.img`, where `<kernel>` is the\n  name of your kernel executable. This image can be started in QEMU or booted on a real machine\n  after burning it to an USB stick..\n- A disk image suitable for UEFI booting, named `boot-uefi-<kernel>.img`. Like the BIOS disk image,\n  this can be started in QEMU (requires OVMF) and burned to an USB stick to run it on a real\n  machine.\n- Intermediate UEFI files\n  - A FAT partition image named `boot-uefi-<kernel>.fat`, which can be directly started in QEMU\n    or written as an EFI system partition to a GPT-formatted disk.\n  - An EFI file named `boot-uefi-<kernel>.efi`. This executable is the combination of the\n    bootloader and kernel executables. It can be started in QEMU or used to construct a bootable\n    disk image: Create an EFI system partition formatted with the FAT filesystem and place the\n    EFI file under `efi\\boot\\bootx64.efi` on that filesystem.\n\n**You can find some examples that implement the above steps [in our GitHub repo](https://github.com/rust-osdev/bootloader/tree/main/examples).**\n\n## Configuration\n\nThe bootloader can be configured through a `[package.metadata.bootloader]` table in the\n`Cargo.toml` of the kernel (the one passed as `--kernel-manifest`). See the [`Config`] struct\nfor all possible configuration options.\n*/","span":{"file_name":"/Users/kyleryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bootloader-0.10.12/src/lib.rs","byte_start":0,"byte_end":3985,"line_start":1,"line_end":66,"column_start":1,"column_end":3}},{"value":"no_std","span":{"file_name":"/Users/kyleryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bootloader-0.10.12/src/lib.rs","byte_start":4025,"byte_end":4031,"line_start":68,"line_end":68,"column_start":39,"column_end":45}},{"value":"feature(maybe_uninit_slice)","span":{"file_name":"/Users/kyleryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bootloader-0.10.12/src/lib.rs","byte_start":4034,"byte_end":4065,"line_start":69,"line_end":69,"column_start":1,"column_end":32}},{"value":"deny(unsafe_op_in_unsafe_fn)","span":{"file_name":"/Users/kyleryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bootloader-0.10.12/src/lib.rs","byte_start":4066,"byte_end":4098,"line_start":70,"line_end":70,"column_start":1,"column_end":33}},{"value":"warn(missing_docs)","span":{"file_name":"/Users/kyleryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bootloader-0.10.12/src/lib.rs","byte_start":4099,"byte_end":4121,"line_start":71,"line_end":71,"column_start":1,"column_end":23}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/kyleryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bootloader-0.10.12/src/boot_info.rs","byte_start":13671,"byte_end":13684,"line_start":77,"line_end":77,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":20},{"krate":0,"index":21}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/Users/kyleryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bootloader-0.10.12/src/boot_info.rs","byte_start":13854,"byte_end":13867,"line_start":85,"line_end":85,"column_start":24,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":23}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/kyleryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bootloader-0.10.12/src/boot_info.rs","byte_start":14038,"byte_end":14051,"line_start":91,"line_end":91,"column_start":44,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/Users/kyleryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bootloader-0.10.12/src/boot_info.rs","byte_start":14878,"byte_end":14890,"line_start":120,"line_end":120,"column_start":6,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":29}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/Users/kyleryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bootloader-0.10.12/src/boot_info.rs","byte_start":16098,"byte_end":16109,"line_start":161,"line_end":161,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":31},{"krate":0,"index":32},{"krate":0,"index":33},{"krate":0,"index":35}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/Users/kyleryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bootloader-0.10.12/src/boot_info.rs","byte_start":19487,"byte_end":19495,"line_start":260,"line_end":260,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/kyleryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bootloader-0.10.12/src/boot_info.rs","byte_start":20318,"byte_end":20326,"line_start":289,"line_end":289,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":43}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/kyleryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bootloader-0.10.12/src/boot_info.rs","byte_start":20513,"byte_end":20519,"line_start":298,"line_end":298,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":46}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/kyleryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bootloader-0.10.12/src/boot_info.rs","byte_start":13671,"byte_end":13684,"line_start":77,"line_end":77,"column_start":21,"column_end":34},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":77},"to":{"krate":1,"index":3369}},{"span":{"file_name":"/Users/kyleryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bootloader-0.10.12/src/boot_info.rs","byte_start":13854,"byte_end":13867,"line_start":85,"line_end":85,"column_start":24,"column_end":37},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":77},"to":{"krate":1,"index":3382}},{"span":{"file_name":"/Users/kyleryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bootloader-0.10.12/src/boot_info.rs","byte_start":14038,"byte_end":14051,"line_start":91,"line_end":91,"column_start":44,"column_end":57},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":77},"to":{"krate":1,"index":3056}},{"span":{"file_name":"/Users/kyleryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bootloader-0.10.12/src/boot_info.rs","byte_start":14878,"byte_end":14890,"line_start":120,"line_end":120,"column_start":6,"column_end":18},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":82},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kyleryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bootloader-0.10.12/src/boot_info.rs","byte_start":16098,"byte_end":16109,"line_start":161,"line_end":161,"column_start":6,"column_end":17},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":121},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kyleryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bootloader-0.10.12/src/boot_info.rs","byte_start":19487,"byte_end":19495,"line_start":260,"line_end":260,"column_start":9,"column_end":17},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":173},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/kyleryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bootloader-0.10.12/src/boot_info.rs","byte_start":20318,"byte_end":20326,"line_start":289,"line_end":289,"column_start":29,"column_end":37},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":173},"to":{"krate":1,"index":3056}},{"span":{"file_name":"/Users/kyleryan/.cargo/registry/src/github.com-1ecc6299db9ec823/bootloader-0.10.12/src/boot_info.rs","byte_start":20513,"byte_end":20519,"line_start":298,"line_end":298,"column_start":31,"column_end":37},"kind":{"Impl":{"id":7}},"from":{"krate":1,"index":46941},"to":{"krate":1,"index":3056}}]}